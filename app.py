import streamlit as st
from PIL import Image
import torch
import torch.nn as nn
from torchvision import transforms
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import numpy as np
import requests
from io import BytesIO

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="AI X-ray Diagnosis",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh cho giao di·ªán ƒë·∫πp h∆°n
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 2rem 0;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        margin: -1rem -1rem 2rem -1rem;
        border-radius: 10px;
        color: white;
    }
    
    .stFileUploader > div > div > div {
        background-color: #f8f9fa;
        border: 2px dashed #007bff;
        border-radius: 15px;
        padding: 2rem;
        text-align: center;
    }
    
    .upload-text {
        font-size: 1.2rem;
        color: #6c757d;
        margin-bottom: 1rem;
    }
    
    .result-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        margin: 1rem 0;
    }
    
    .confidence-bar {
        background-color: rgba(255,255,255,0.3);
        border-radius: 10px;
        padding: 0.5rem;
        margin: 1rem 0;
    }
    
    .sidebar-info {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #007bff;
    }
    
    .metric-container {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #28a745;
    }
    
    .warning-container {
        background: #fff3cd;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #ffc107;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Header ch√≠nh
st.markdown("""
<div class="main-header">
    <h1>üè• AI Ch·∫©n ƒêo√°n X-ray Th√¥ng Minh</h1>
    <p style="font-size: 1.2rem; margin-bottom: 0;">Ph√¢n t√≠ch h√¨nh ·∫£nh X-ray ph·ªïi b·∫±ng Deep Learning</p>
</div>
""", unsafe_allow_html=True)

# Sidebar v·ªõi th√¥ng tin
with st.sidebar:
    st.markdown("### ‚ÑπÔ∏è Th√¥ng Tin H·ªá Th·ªëng")
    st.markdown("""
    <div class="sidebar-info">
        <strong>Model:</strong> Simple CNN<br>
        <strong>Dataset:</strong> Chest X-ray<br>
        <strong>Accuracy:</strong> ~95%<br>
        <strong>Classes:</strong> Normal, Pneumonia
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("### üìã H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
    st.markdown("""
    1. **T·∫£i ·∫£nh X-ray** l√™n h·ªá th·ªëng
    2. **Ch·ªù AI ph√¢n t√≠ch** (v√†i gi√¢y)
    3. **Xem k·∫øt qu·∫£** chi ti·∫øt
    4. **Tham kh·∫£o khuy·∫øn ngh·ªã** t·ª´ h·ªá th·ªëng
    """)
    
    st.markdown("### ‚ö†Ô∏è L∆∞u √ù Quan Tr·ªçng")
    st.warning("""
    K·∫øt qu·∫£ ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. 
    Vui l√≤ng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa 
    ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c.
    """)

# ƒê·ªãnh nghƒ©a Simple CNN model
class SimpleCNN(nn.Module):
    def __init__(self, num_classes=2):
        super(SimpleCNN, self).__init__()
        self.conv_layers = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),
        )
        self.classifier = nn.Sequential(
            nn.AdaptiveAvgPool2d((7, 7)),
            nn.Flatten(),
            nn.Linear(128 * 7 * 7, 256),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(256, num_classes)
        )
        
    def forward(self, x):
        x = self.conv_layers(x)
        x = self.classifier(x)
        return x

# Load model (v·ªõi cache ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t)
@st.cache_resource
def load_model():
    try:
        # Th·ª≠ t·∫£i t·ª´ Hugging Face Hub
        try:
            from huggingface_hub import hf_hub_download
            model_path = hf_hub_download(repo_id="vanhai123/simple-cnn-chest-xray", filename="model.pth")
            model = SimpleCNN(num_classes=2)
            model.load_state_dict(torch.load(model_path, map_location='cpu'))
            model.eval()
            
            # ƒê·ªãnh nghƒ©a transform
            transform = transforms.Compose([
                transforms.Resize((224, 224)),
                transforms.ToTensor(),
                transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
            ])
            
            return model, transform, True
            
        except Exception as hub_error:
            st.warning(f"Kh√¥ng th·ªÉ t·∫£i model t·ª´ Hugging Face: {hub_error}")
            # Fallback: T·∫°o model demo
            model = SimpleCNN(num_classes=2)
            transform = transforms.Compose([
                transforms.Resize((224, 224)),
                transforms.ToTensor(),
                transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
            ])
            return model, transform, False
            
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i model: {str(e)}")
        return None, None, False

# T·∫£i model
with st.spinner("üîÑ ƒêang t·∫£i AI model..."):
    model, transform, is_trained = load_model()

if model is None:
    st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i model. Vui l√≤ng th·ª≠ l·∫°i sau.")
    st.stop()

# Th√¥ng b√°o tr·∫°ng th√°i model
if not is_trained:
    st.warning("‚ö†Ô∏è ƒêang s·ª≠ d·ª•ng model demo. K·∫øt qu·∫£ ch·ªâ mang t√≠nh minh h·ªça.")

# ƒê·ªãnh nghƒ©a labels
id2label = {0: "Normal", 1: "Pneumonia"}

# Layout ch√≠nh
col1, col2 = st.columns([1, 1])

with col1:
    st.markdown("### üì§ T·∫£i ·∫¢nh X-ray")
    st.markdown('<div class="upload-text">K√©o th·∫£ ho·∫∑c click ƒë·ªÉ ch·ªçn ·∫£nh</div>', unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader(
        "",
        type=["jpg", "jpeg", "png"],
        help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG"
    )

with col2:
    st.markdown("### üìä K·∫øt Qu·∫£ Ph√¢n T√≠ch")
    result_placeholder = st.empty()

if uploaded_file:
    try:
        # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n
        image = Image.open(uploaded_file).convert("RGB")
        
        with col1:
            st.image(
                image, 
                caption=f"üì∑ {uploaded_file.name}", 
                use_column_width=True
            )
            
            # Th√¥ng tin ·∫£nh
            st.markdown("#### üìã Th√¥ng Tin ·∫¢nh")
            img_info = f"""
            - **T√™n file:** {uploaded_file.name}
            - **K√≠ch th∆∞·ªõc:** {image.size[0]} x {image.size[1]} pixels
            - **Dung l∆∞·ª£ng:** {uploaded_file.size / 1024:.1f} KB
            - **Th·ªùi gian:** {datetime.now().strftime("%H:%M:%S - %d/%m/%Y")}
            """
            st.markdown(img_info)
        
        # Ph√¢n t√≠ch ·∫£nh
        with st.spinner("ü§ñ AI ƒëang ph√¢n t√≠ch ·∫£nh..."):
            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
            input_tensor = transform(image).unsqueeze(0)
            
            # D·ª± ƒëo√°n
            with torch.no_grad():
                if is_trained:
                    outputs = model(input_tensor)
                    probs = torch.softmax(outputs, dim=1)
                    pred_idx = torch.argmax(probs, dim=1).item()
                    confidence = probs[0][pred_idx].item()
                    all_probs = probs[0].numpy()
                else:
                    # Demo mode - random results for demonstration
                    import random
                    random.seed(42)  # For consistent demo results
                    all_probs = np.array([random.uniform(0.3, 0.9), random.uniform(0.1, 0.7)])
                    all_probs = all_probs / all_probs.sum()  # Normalize
                    pred_idx = np.argmax(all_probs)
                    confidence = all_probs[pred_idx]
                
                labels = list(id2label.values())
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        with col2:
            label = id2label[pred_idx]
            
            # K·∫øt qu·∫£ ch√≠nh
            if label.lower() == "normal":
                st.success(f"‚úÖ **K·∫øt qu·∫£: {label}**")
                st.markdown(f"**ƒê·ªô tin c·∫≠y:** {confidence:.1%}")
            else:
                st.error(f"‚ö†Ô∏è **K·∫øt qu·∫£: {label}**")
                st.markdown(f"**ƒê·ªô tin c·∫≠y:** {confidence:.1%}")
            
            # Bi·ªÉu ƒë·ªì confidence
            fig_bar = px.bar(
                x=labels,
                y=[prob * 100 for prob in all_probs],
                title="Ph√¢n T√≠ch Chi Ti·∫øt (%)",
                color=[prob * 100 for prob in all_probs],
                color_continuous_scale="RdYlGn"
            )
            fig_bar.update_layout(
                showlegend=False,
                height=300,
                xaxis_title="Ch·∫©n ƒêo√°n",
                yaxis_title="X√°c Su·∫•t (%)"
            )
            st.plotly_chart(fig_bar, use_container_width=True)
            
            # Bi·ªÉu ƒë·ªì tr√≤n
            fig_pie = px.pie(
                values=all_probs,
                names=labels,
                title="T·ª∑ L·ªá Ch·∫©n ƒêo√°n"
            )
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)
        
        # Khuy·∫øn ngh·ªã v√† th√¥ng tin chi ti·∫øt
        st.markdown("---")
        st.markdown("### üí° Khuy·∫øn Ngh·ªã & Th√¥ng Tin Chi Ti·∫øt")
        
        col3, col4 = st.columns([1, 1])
        
        with col3:
            if label.lower() == "normal":
                st.markdown("""
                <div class="metric-container">
                    <h4>‚úÖ Ph·ªïi B√¨nh Th∆∞·ªùng</h4>
                    <p><strong>√ù nghƒ©a:</strong> Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu b·∫•t th∆∞·ªùng</p>
                    <p><strong>Khuy·∫øn ngh·ªã:</strong></p>
                    <ul>
                        <li>Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh</li>
                        <li>T·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n</li>
                        <li>Ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div class="warning-container">
                    <h4>‚ö†Ô∏è Ph√°t Hi·ªán B·∫•t Th∆∞·ªùng</h4>
                    <p><strong>Khuy·∫øn ngh·ªã kh·∫©n c·∫•p:</strong></p>
                    <ul>
                        <li>üè• <strong>Li√™n h·ªá b√°c sƒ© ngay l·∫≠p t·ª©c</strong></li>
                        <li>üìã Mang k·∫øt qu·∫£ n√†y ƒë·∫øn c∆° s·ªü y t·∫ø</li>
                        <li>üö´ Kh√¥ng t·ª± ƒëi·ªÅu tr·ªã</li>
                        <li>‚è∞ C·∫ßn ch·∫©n ƒëo√°n chuy√™n khoa</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
        
        with col4:
            st.markdown("#### üìà Th·ªëng K√™ Ph√¢n T√≠ch")
            
            # Metrics
            st.metric("ƒê·ªô Tin C·∫≠y", f"{confidence:.1%}", 
                     delta=f"{confidence-0.5:.1%}" if confidence > 0.5 else f"{confidence-0.5:.1%}")
            
            st.metric("Th·ªùi Gian Ph√¢n T√≠ch", "< 2s", delta="Nhanh")
            
            # Thanh ti·∫øn tr√¨nh confidence
            st.markdown("**M·ª©c ƒê·ªô Tin C·∫≠y:**")
            st.progress(confidence)
            
            if confidence >= 0.9:
                st.success("üéØ ƒê·ªô tin c·∫≠y r·∫•t cao")
            elif confidence >= 0.7:
                st.warning("‚ö° ƒê·ªô tin c·∫≠y t·ªët")
            else:
                st.error("‚ö†Ô∏è ƒê·ªô tin c·∫≠y th·∫•p - c·∫ßn xem x√©t th√™m")
    
    except Exception as e:
        st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")
        st.info("üí° Vui l√≤ng th·ª≠ v·ªõi ·∫£nh X-ray kh√°c ho·∫∑c ki·ªÉm tra ƒë·ªãnh d·∫°ng file.")

else:
    # H∆∞·ªõng d·∫´n khi ch∆∞a c√≥ ·∫£nh
    with col2:
        result_placeholder.markdown("""
        <div style="text-align: center; padding: 3rem; color: #6c757d;">
            <h3>üî¨ Ch·ªù ·∫¢nh X-ray</h3>
            <p>Vui l√≤ng t·∫£i ·∫£nh X-ray l√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch</p>
            <p><small>H·ªó tr·ª£: JPG, JPEG, PNG</small></p>
        </div>
        """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #6c757d; padding: 1rem;">
    <p>ü§ñ <strong>AI X-ray Diagnosis System</strong> | 
    Powered by Deep Learning | 
    <small>v2.0 - 2025</small></p>
    <p><small>‚ö†Ô∏è Ch·ªâ d√πng ƒë·ªÉ tham kh·∫£o - Kh√¥ng thay th·∫ø ch·∫©n ƒëo√°n y khoa</small></p>
</div>
""", unsafe_allow_html=True)